from flask import Flask, jsonify, render_template
import requests
import os

app = Flask(__name__)

# Path to the output file generated by the reducer
OUTPUT_FILE = 'mapreduce_output.txt'

# YARN ResourceManager URL (assuming it's running locally)
YARN_RESOURCE_MANAGER_URL = 'http://localhost:8088/ws/v1/cluster/apps'

# Function to parse the MapReduce output and find the highest risk group
def parse_mapreduce_output():
    results = []
    highest_risk = None
    highest_percentage = 0

    try:
        with open(OUTPUT_FILE, 'r') as file:
            for line in file:
                line = line.strip()
                if line:  # Ensure the line is not empty
                    # Split by tab and then by comma to separate Total, Heart Disease, and Percentage
                    key, value = line.split("\t")
                    total_patients = int(value.split(",")[0].split(":")[1].strip())
                    heart_disease_count = int(value.split(",")[1].split(":")[1].strip())
                    percentage = float(value.split(",")[2].split(":")[1].strip().replace('%', '').strip())

                    # Check if this group has the highest percentage
                    if percentage > highest_percentage:
                        highest_percentage = percentage
                        highest_risk = key

                    # Append the data to the results list
                    results.append({
                        'age_chol_bucket': key,
                        'total_patients': total_patients,
                        'heart_disease_count': heart_disease_count,
                        'percentage': percentage
                    })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

    return results, highest_risk, highest_percentage

# Function to check the status of the MapReduce job from YARN ResourceManager
def get_job_status():
    try:
        # Query the YARN ResourceManager API to get the status of running jobs
        response = requests.get(YARN_RESOURCE_MANAGER_URL)
        data = response.json()

        if 'apps' in data:
            for app in data['apps']['app']:
                # Replace with your job ID or application name here if needed
                if 'your_job_name_or_id' in app['name']:  # Customize based on your job name or ID
                    return app['state']  # Return the state (RUNNING, FINISHED, etc.)
        return "Unknown"
    except Exception as e:
        return f"Error: {str(e)}"

@app.route('/api/data')
def get_data():
    # Get the parsed results and highest risk group
    results, highest_risk, highest_percentage = parse_mapreduce_output()

    # Get the status of the MapReduce job from YARN ResourceManager
    job_status = get_job_status()

    return jsonify({
        'results': results,
        'highest_risk': highest_risk,
        'highest_percentage': highest_percentage,
        'job_status': job_status
    })

@app.route('/')
def index():
    # Get the parsed results and highest risk group
    results, highest_risk, highest_percentage = parse_mapreduce_output()

    # Get the status of the MapReduce job from YARN ResourceManager
    job_status = get_job_status()

    # Pass the data to the HTML template
    return render_template('dashboard.html', results=results, highest_risk=highest_risk, highest_percentage=highest_percentage, job_status=job_status)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, debug=True)
